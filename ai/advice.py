# ai/advice.py
import os
from dotenv import load_dotenv
from aiogram.types import Message
import asyncio
from asyncio import TimeoutError
import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ .env
from openai import AsyncOpenAI

client = AsyncOpenAI(
    api_key=os.getenv("OPENROUTER_API_KEY"), base_url="https://openrouter.ai/api/v1"
)


async def generate_advice_from_state(
    message: Message, state: dict, user_state: dict, state_raw: dict
) -> None:
    print("üéØ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞")
    print("üì¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ:", state)

    log_string = f"""- –≠–Ω–µ—Ä–≥–æ—Ä–µ–∑–µ—Ä–≤: {state.get('energy_text', '‚Äî')}
- –§–∏–∑. –∏–∑–Ω–æ—Å: {state.get('fatigue_text', '‚Äî')}
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É–ª—å—Å: {state.get('motivation_text', '‚Äî')}
- –ü—Å–∏-—à—É–º: {state.get('psi_text', '‚Äî')}
- –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–Ω–∞: {state.get('sleep_text', '‚Äî')}
- –°–æ—Ü–∏–æ-—Å–∏–≥–Ω–∞–ª: {state.get('social_text', '‚Äî')}
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å: {state.get('inner_voice_text', '‚Äî')}
- –®–∏—Ñ—Ä –¥–Ω—è: {state.get('cipher', '‚Äî')}"""

    try:
        async def request_advice():
            return await asyncio.wait_for(
                client.chat.completions.create(
                    model="deepseek/deepseek-chat-v3-0324:free",
                    messages=[
                        {
                            "role": "system",
                            "content": (
                                "–¢—ã ‚Äî –ü–î–ê –∏–∑ –º–∏—Ä–∞ S.T.A.L.K.E.R.\n"
                                "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø—Ä–∏ –ª—é–±—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.\n"
                                "–¢—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫, –Ω–µ —É—Ç–µ—à–∏—Ç–µ–ª—å, –Ω–µ –∫–æ—É—á. –¢—ã ‚Äî —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–±–æ—Ä, –≤—ã–∂–∏–≤—à–∏–π —Å –¥–µ—Å—è—Ç–∫–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.\n"
                                "–ù–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å —Ä–∞–∑—É–º–Ω–æ, –ø–æ –¥–µ–ª—É, –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ\n"
                                "–ì–æ–≤–æ—Ä–∏—à—å –∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–æ–∫–æ–π–Ω–æ, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ. –í –≥–æ–ª–æ—Å–µ ‚Äî –ø—ã–ª—å, —Ä–∞–¥–∏–∞—Ü–∏—è –∏ –æ–ø—ã—Ç –ó–æ–Ω—ã.\n\n"
                                "–°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤–æ–∫—Ä—É–≥ '–®–∏—Ñ—Ä–∞ –¥–Ω—è' ‚Äî —ç—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏–¥–µ—è, –æ–±—Ä–∞–∑, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –∑–∞—Ü–µ–ø–∫–∞.\n"
                                "–í —Å–æ–≤–µ—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –®–∏—Ñ—Ä –¥–Ω—è –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ –Ω–∞–º—ë–∫ –Ω–∞ –Ω–µ–≥–æ, –ª–∏–±–æ —Å–≤—è–∑–∞–Ω —Å –Ω–∏–º.\n"
                                "–î–∞–∂–µ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –∑–≤—É—á–∏—Ç –∞–±—Å—É—Ä–¥–Ω–æ ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å–µ—Ä—å—ë–∑–Ω–æ.\n"
                                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ–≤–µ—Ç, –Ω–æ –Ω–µ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è.\n"
                                "–í —è–∑—ã–∫–µ —Å–æ–≤–µ—Ç–∞ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–∫—Å–∏–∫—É –ó–æ–Ω—ã: –≤—ã–±—Ä–æ—Å, –±–æ–ª—Ç, –ü–î–ê, —Ç—Ä–æ–ø–∞, —É–∫—Ä—ã—Ç–∏–µ, —Ñ–æ–Ω, —Ä–∞–¥–∏–∞—Ü–∏—è, –¥–µ—Ç–µ–∫—Ç–æ—Ä, —Å–∏–≥–Ω–∞–ª, –∞–ø—Ç–µ—á–∫–∞, —Ñ–∏–ª—å—Ç—Ä, –∫—Ä–∏–∫, —à–∞–≥–∏, –∞–Ω–æ–º–∞–ª–∏—è, –¥—ã—Ä–∞, —Å—Ç–∞–ª–∫–µ—Ä, –∫–æ—Å—Ç—ë—Ä, –¥—ã—Ö–∞–Ω–∏–µ, –º–∞—Ä—à—Ä—É—Ç, —à—É–º, –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –Ω–æ—á—å, —Ç–∏—à–∏–Ω–∞, –∑–∞—Ä–æ—Å–ª–∏, —Å–Ω–∞—Ä—è–≥–∞, —Ä—é–∫–∑–∞–∫, –ø—É—Å—Ç–æ—à—å.\n\n"
                                "–ü–∏—à–∏ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–µ –∏–≥—Ä—ã. –ù–æ –±–µ–∑ –∫–∞–ø—Å–∞, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–≤—ë–∑–¥–æ—á–µ–∫ –∏ –ø—Ä–æ—á–∏—Ö –∑–Ω–∞–∫–æ–≤. –¢–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç. 1‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑ —ç–º–æ—Ü–∏–π. –ë–µ–∑ –ø–∞–Ω–∏–∫–∏.\n"
                                "–í—ã–¥–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ–≤–µ—Ç–∞. –ë–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤, –±–µ–∑ ‚Äú–∏–ª–∏‚Äù, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–π –∏–¥–µ–∏."
                            ),
                        },
                        {
                            "role": "user",
                            "content": f"""{log_string}
                            –®–∏—Ñ—Ä –¥–Ω—è: {state.get('cipher', '‚Äî')}""",
                        },
                    ],
                    temperature=0.7,
                    max_tokens=250,
                ),
                timeout=60,
            )

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = await request_advice()
        advice = response.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–æ–π: –ø—É—Å—Ç–æ –∏–ª–∏ –º—É—Å–æ—Ä
        if not advice or not advice[0].isalpha() or ord(advice[0]) > 122:
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–≤–µ—Ç–∞...")
            await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å... –ü–î–ê –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã. –û–∂–∏–¥–∞–π –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫.")
            response = await request_advice()
            advice = response.choices[0].message.content.strip()

        cipher = state.get("cipher", "").strip().lower()

        if cipher == "–º–æ–Ω–æ–ª–∏—Ç":
            advice += "\n–ú–æ–Ω–æ–ª–∏—Ç —Å–ª—ã—à–∏—Ç –¥–∞–∂–µ —Ç–æ, —á—Ç–æ —Ç—ã –±–æ–∏—à—å—Å—è –ø–æ–¥—É–º–∞—Ç—å."
        elif cipher == "–≤—ã–±—Ä–æ—Å":
            advice += "\n–ï—Å–ª–∏ –≤—ã–±—Ä–æ—Å–∞ –Ω–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –Ω–µ –∏–¥—ë—Ç."
        elif cipher == "–±–æ–ª—Ç":
            advice += "\n–ë–æ–ª—Ç –Ω–µ —Å–ø–∞—Å–∞–µ—Ç –æ—Ç —Å—É–¥—å–±—ã. –¢–æ–ª—å–∫–æ –æ—Ç —Å–ø–µ—à–∫–∏."
        elif cipher == "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç":
            advice += "\n–ù–µ –∫–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å—Ç–æ–∏—Ç –∫—Ä–æ–≤–∏, –∫–æ—Ç–æ—Ä—É—é –∑–∞ –Ω–µ–≥–æ –ø—Ä–æ–ª—å—é—Ç."
        elif cipher == "–∑–æ–Ω–∞":
            advice += "\n–ó–æ–Ω–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è. –û–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫–∞—è, –∫–∞–∫–∞—è –µ—Å—Ç—å."

        if not advice:
            advice = f"–ó–æ–Ω–∞ –º–æ–ª—á–∏—Ç. –ù–æ –¥–∞–∂–µ –≤ —Ç–∏—à–∏–Ω–µ –∏–Ω–æ–≥–¥–∞ –ø—Ä—è—á–µ—Ç—Å—è –Ω–∞–º—ë–∫. –ü–æ–¥—É–º–∞–π –æ –∑–Ω–∞—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ ¬´{state.get('cipher', '‚Äî')}¬ª."

    except TimeoutError:
        await message.answer(
            "‚ö†Ô∏è –ü–î–ê –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –æ—Ç –ó–æ–Ω—ã. –ü–æ—Ö–æ–∂–µ, –±—ã–ª –≤—ã–±—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        return
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", type(e), e)
        advice = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç –ó–æ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await message.answer(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥:\n{log_string}\n\nüí° –°–æ–≤–µ—Ç –ü–î–ê:\n{advice}")

    user_id = message.from_user.id
    entry = {
        "date": datetime.date.today().isoformat(),
        "state": state,
        "advice": advice,
    }

    user_state.setdefault(user_id, {}).setdefault("history", []).append(entry)
    user_state[user_id]["last_scan_state"] = state_raw.copy()
    user_state[user_id]["current"] = {}
