# handlers/questions.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
from utils.state import user_state


async def ask_energy(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–∏–ª –ø–æ—Å–ª–µ –≤—ã–ª–∞–∑–∫–∏?",
        "–ü–î–ê: –≠–Ω–µ—Ä–≥–∏—è –Ω–∞ –Ω—É–ª–µ –∏–ª–∏ –µ—â—ë –¥–µ—Ä–∂–∏—à—å—Å—è?",
        "–ü–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–π. –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞?",
        "–ü–î–ê: –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –±–æ–µ—Å–ø–æ—Å–æ–±–µ–Ω, —Å—Ç–∞–ª–∫–µ—Ä?",
        "–ü–î–ê: –û—Ü–µ–Ω–∏ —Å–≤–æ–π –∑–∞—Ä—è–¥. –¢—ã –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ –∏–ª–∏ –≤ –Ω–æ—Ä–º–µ?",
        "–ü–î–ê: –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Ç–≤–æ—ë–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–µ?",
        "–ü–î–ê: –ö–∞–∫ —É —Ç–µ–±—è —Å –∑–∞–ø–∞—Å–æ–º —Å–∏–ª —Å–µ–≥–æ–¥–Ω—è?",
    ]

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üíÄ –ù–∞ –ø—Ä–µ–¥–µ–ª–µ", callback_data="energy_1"),
        types.InlineKeyboardButton(text="‚è≥ –ó–∞–ø–∞—Å —Ç–∞–µ—Ç", callback_data="energy_2"),
    )
    builder.row(
        types.InlineKeyboardButton(text="üõ°Ô∏è –ë–æ–µ—Å–ø–æ—Å–æ–±–µ–Ω", callback_data="energy_3"),
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–ª–Ω—ã–π –∑–∞—Ä—è–¥", callback_data="energy_4"),
    )

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_fatigue(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –ö–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ?",
        "–ü–î–ê: –ò–∑–Ω–æ—Å —á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è?",
        "–ü–î–ê: –ï—Å—Ç—å –ª–∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å –≤ —Å—É—Å—Ç–∞–≤–∞—Ö –∏ –º—ã—à—Ü–∞—Ö?",
        "–ü–î–ê: –ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ª–∞–∑–∫–∏?",
        "–ü–î–ê: –¢–µ–ª–æ –±–æ–¥—Ä–æ –∏–ª–∏ —Å–ª–∞–±–µ–µ—Ç?",
        "–ü–î–ê: –ö–∞–∫–æ–≤—ã –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ª–∞–∑–∫–∏ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º?",
        "–ü–î–ê: –û—Å—Ç–∞—Ç–∫–∏ —Å–∏–ª ‚Äî –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ –∏–ª–∏ —Å –∑–∞–ø–∞—Å–æ–º?",
        "–ü–î–ê: –¢–µ–ª–æ –Ω–∞–≥–æ—Ç–æ–≤–µ –∏–ª–∏ –ø–æ–¥–≤–æ–¥–∏—Ç?",
        "–ü–î–ê: –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–∏–æ—Å–∏—Å—Ç–µ–º—ã.",
        "–ü–î–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏ –∏–∑–Ω–æ—Å –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞?",
        "–ü–î–ê: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –º—ã—à–µ—á–Ω–æ–π —Ç–∫–∞–Ω–∏?",
        "–ü–î–ê: –û—Ç—á—ë—Ç –ø–æ –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏ —Å—É—Å—Ç–∞–≤–æ–≤: –≤ –Ω–æ—Ä–º–µ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞?",
        "–ü–î–ê: –¢–µ–∫—É—â–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å —Ç–µ–ª–∞: —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–Ω—ã–π?",
        "–ü–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ—Ç–æ—Ä–∏–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ."
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üî• –ü—É–ª—å—Å –≤ –Ω–æ—Ä–º–µ, —ç–Ω–µ—Ä–≥–∏—è –≤ –∫—Ä–æ–≤–∏", callback_data="fatigue_1"))
    builder.row(types.InlineKeyboardButton(text="ü§ï –°–ª–µ–≥–∫–∞ —É—Å—Ç–∞–ª, –Ω–æ –≤–ø–µ—Ä–µ–¥–∏ –¥–æ—Ä–æ–≥–∞", callback_data="fatigue_2"))
    builder.row(types.InlineKeyboardButton(text="üß± –ü–µ—Å–æ–∫ –≤ —Å—É—Å—Ç–∞–≤–∞—Ö", callback_data="fatigue_3"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_motivation(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –•–æ—á–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å, —Å—Ç–∞–ª–∫–µ—Ä?",
        "–ü–î–ê: –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∏–º–ø—É–ª—å—Å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥?",
        "–ü–î–ê: –ß—Ç–æ —Ç–∞–º —Å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π? –ò–ª–∏ –¥–≤–∏–≥–∞–µ—à—å—Å—è –ø–æ –∏–Ω–µ—Ä—Ü–∏–∏?",
        "–ü–î–ê: –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –≤ –±–æ–µ–≤–æ–º –¥—É—Ö–µ —Å–µ–≥–æ–¥–Ω—è?",
        "–ü–î–ê: –û–≥–æ–Ω—å –≤–Ω—É—Ç—Ä–∏ ‚Äî –≥–æ—Ä–∏—Ç –∏–ª–∏ —É–≥–∞—Å–∞–µ—Ç?",
        "–ü–î–ê: –ï—Å—Ç—å –ª–∏ –∂–µ–ª–∞–Ω–∏–µ –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥ –∏ –∏—Å–∫–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã?",
        "–ü–î–ê: –°—Ç–∞—Ç—É—Å –±–æ–µ–≤–æ–≥–æ –¥—É—Ö–∞: —Å—Ç–∞–±–∏–ª–µ–Ω –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω?",
        "–ü–î–ê: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–µ–ø—å –∞–∫—Ç–∏–≤–Ω–∞?",
        "–ü–î–ê: –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á?",
        "–ü–î–ê: –¶–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ?",
        "–ü–î–ê: –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ?"
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="ü¶æ –†–≤—É—Å—å –≤ –±–æ–π", callback_data="motivation_1"))
    builder.row(types.InlineKeyboardButton(text="üîÑ –î–≤–∏–≥–∞—é—Å—å –ø–æ –∏–Ω–µ—Ä—Ü–∏–∏", callback_data="motivation_2"))
    builder.row(types.InlineKeyboardButton(text="üíÄ –•–æ—Ç—å –±—ã —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è", callback_data="motivation_3"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_psi_noise(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –ú–µ—à–∞—é—Ç –ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–º–µ—Ö–∏?",
        "–ü–î–ê: –®—É–º–∏—Ç –ª–∏ –≤–Ω—É—Ç—Ä–∏?",
        "–ü–î–ê: –í –≥–æ–ª–æ–≤–µ –ø–æ—Ä—è–¥–æ–∫ –∏–ª–∏ –ø—Å–∏-–≥—É–ª?",
        "–ü–î–ê: –ü—Å–∏-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—à–∞–µ—Ç —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ?",
        "–ü–î–ê: –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ –ø—Å–∏-—à—É–º –∏–ª–∏ —à—Ç–æ—Ä–º?",
        "–ü–î–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏ –ø—Å–∏-—Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏?",
        "–ü–î–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Å–∏-–ø–æ–ª—è: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞?",
        "–ü–î–ê: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —à—É–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω?",
        "–ü–î–ê: –û—Ü–µ–Ω–∫–∞ –ø—Å–∏-—Å—Ä–µ–¥—ã: —á–∏—Å—Ç–æ –∏–ª–∏ –≤–æ–∑–º—É—â–µ–Ω–æ?",
        "–ü–î–ê: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è?",
        "–ü–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–∞?",
        "–ü–î–ê: –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ–ø–æ–ª—è: —Ñ–æ–Ω, –≥—É–ª –∏–ª–∏ —à—Ç–æ—Ä–º?"
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üßò –ß–∏—Å—Ç–æ", callback_data="psi_1"))
    builder.row(types.InlineKeyboardButton(text="üå´Ô∏è –§–æ–Ω–æ–≤—ã–π –≥—É–ª", callback_data="psi_2"))
    builder.row(types.InlineKeyboardButton(text="üå©Ô∏è –ü—Å–∏-—à—Ç–æ—Ä–º", callback_data="psi_3"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_sleep(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –ß—Ç–æ —Ç–≤–æ—Ä–∏–ª–æ—Å—å –Ω–æ—á—å—é?",
        "–ü–î–ê: –°–æ–Ω –±—ã–ª –∫—Ä–µ–ø–∫–∏–º –∏–ª–∏ –ó–æ–Ω–∞ —à–µ–ø—Ç–∞–ª–∞?",
        "–ü–î–ê: –í—ã—Å–ø–∞–ª—Å—è –∏–ª–∏ –±–ª—É–∂–¥–∞–ª –ø–æ –∫–æ—Ä–∏–¥–æ—Ä–∞–º —Å–Ω–∞?",
        "–ü–î–ê: –ö–∞–∫ –ø—Ä–æ—à–ª–∞ –Ω–æ—á—å? –°–ø–∞–ª —Å–ø–æ–∫–æ–π–Ω–æ?",
        "–ü–î–ê: –ë—ã–ª–∏ –ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ —Å–Ω—ã –∏–ª–∏ –ø—Ä–æ—Å—ã–ø–∞–Ω–∏—è?",
        "–ü–î–ê: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ—á—å?",
        "–ü–î–ê: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª –≤ –Ω–æ—á–Ω–æ–π —Ñ–∞–∑–µ?",
        "–ü–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–Ω–∞: —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–Ω–æ–µ?",
        "–ü–î–ê: –ë—ã–ª–∞ –ª–∏ –Ω–æ—á—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?",
        "–ü–î–ê: –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤—É?",
        "–ü–î–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ñ–∞–∑—ã –æ—Ç–¥—ã—Ö–∞?",
        "–ü–î–ê: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è?",
        "–ü–î–ê: –†–µ–∂–∏–º —Å–Ω–∞ ‚Äî –∞–∫—Ç–∏–≤–µ–Ω, —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç?",
        "–ü–î–ê: –ü–µ—Ä–∏–æ–¥ –Ω–æ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ?",
        "–ü–î–ê: –£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã —Å–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω?",
        "–ü–î–ê: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?"
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üõå –ù–æ—á—å –ø—Ä–æ—à–ª–∞ –±–µ–∑ —à–æ—Ä–æ—Ö–∞", callback_data="sleep_1"))
    builder.row(types.InlineKeyboardButton(text="‚è∞ –°–æ–Ω —Å –ø–µ—Ä–µ–±–æ—è–º–∏", callback_data="sleep_2"))
    builder.row(types.InlineKeyboardButton(text="üëÅÔ∏è –°–æ–Ω —Ç—Ä–µ–≤–æ–∂–Ω—ã–π", callback_data="sleep_3"))
    builder.row(types.InlineKeyboardButton(text="üåë –ù–µ —Å–ø–∞–ª", callback_data="sleep_4"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_socio_signal(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –ö–∞–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç–∞–ª–∫–µ—Ä–∞–º–∏?",
        "–ü–î–ê: –í —ç—Ñ–∏—Ä–µ –æ–¥–∏–Ω –∏–ª–∏ –ª–æ–≤–∏—à—å –æ—Ç–∫–ª–∏–∫–∏?",
        "–ü–î–ê: –°–∏–≥–Ω–∞–ª –æ—Ç –º–∏—Ä–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∏–ª–∏ –≥–ª—É—à–∏—à—å?",
        "–ü–î–ê: –£—Ä–æ–≤–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ—Ä–º–µ?",
        "–ü–î–ê: –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤?",
        "–ü–î–ê: –ö–∞–∫ –æ–±—Å—Ç–æ—è—Ç –¥–µ–ª–∞ —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π?",
        "–ü–î–ê: –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞?",
        "–ü–î–ê: –°—Ç–∞—Ç—É—Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: –æ—Ç–∫—Ä—ã—Ç, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω?",
        "–ü–î–ê: –§–∏–∫—Å–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏...",
        "–ü–î–ê: –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω?",
        "–ü–î–ê: –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ü–∏–æ-—Å–∏–≥–Ω–∞–ª–∞",
        "–ü–î–ê: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä—É–ø–ø–æ–π ‚Äî –≤ –Ω–æ—Ä–º–µ –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–æ?",
        "–ü–î–ê: –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ø–∏ –∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã?",
        "–ü–î–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏?"
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîí –ò–∑–æ–ª—è—Ü–∏—è ‚Äî –º–æ–π –≤—ã–±–æ—Ä", callback_data="socio_1"))
    builder.row(types.InlineKeyboardButton(text="üì° –ü—Ä–∏—ë–º —Å—Ç–∞–±–∏–ª–µ–Ω", callback_data="socio_2"))
    builder.row(types.InlineKeyboardButton(text="üÜò –ï—Å–ª–∏ –∫—Ç–æ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî –æ—Ç–∑–æ–≤–∏—Å—å", callback_data="socio_3"))
    builder.row(types.InlineKeyboardButton(text="‚ö†Ô∏è –ü–µ—Ä–µ–≥—Ä—É–∑ –æ—Ç –ª—é–¥–µ–π", callback_data="socio_4"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_inner_voice(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –ß—Ç–æ —à–µ–ø—á–µ—Ç —Ç–µ–±–µ –ó–æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏?",
        "–ü–î–ê: –ö–∞–∫–æ–π –≥–æ–ª–æ—Å –∑–≤—É—á–∏—Ç –≤ –≥–æ–ª–æ–≤–µ?",
        "–ü–î–ê: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å ‚Äî –¥—Ä—É–≥ –∏–ª–∏ –≤—Ä–∞–≥?",
        "–ü–î–ê: –ß–µ–≥–æ —Ç–µ–±–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å?",
        "–ü–î–ê: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–ª–∏ –∫—Ä–∏—Ç–∏–∫–∞ ‚Äî —á—Ç–æ —Å–ª—ã—à–∏—à—å?",
        "–ü–î–ê: –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ —Ç–≤–æ—è —Å–æ–≤–µ—Å—Ç—å –∏ —Ä–∞–∑—É–º?",
        "–ü–î–ê: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–∏—ë–º–Ω–∏–∫ ‚Äî –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ, –≤ –º–æ–ª—á–∞–Ω–∏–∏ –∏–ª–∏ –≤ —Å–±–æ–µ?",
        "–ü–î–ê: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –∞–∫—Ç–∏–≤–µ–Ω? –ß—Ç–æ —Å–ª—ã—à–∏—à—å?",
        "–ü–î–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —ç—Ñ–∏—Ä–∞: —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–Ω—è—Ç?",
        "–ü–î–ê: –ß—Ç–æ —Ç–µ–±–µ —à–µ–ø—á–µ—Ç –ó–æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏?",
        "–ü–î–ê: –ì–æ–ª–æ—Å –≤–Ω—É—Ç—Ä–∏ –º–æ–ª—á–∏—Ç, –ø–æ–º–æ–≥–∞–µ—Ç –∏–ª–∏ –º–µ—à–∞–µ—Ç?",
        "–ü–î–ê: –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–±–µ –ó–æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏?",
        "–ü–î–ê: –ó–æ–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç —Å –∫–∞–∂–¥—ã–º. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π?"
    ]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üõ°Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç", callback_data="voice_1"))
    builder.row(types.InlineKeyboardButton(text="üï≥Ô∏è –ú–æ–ª—á–∏—Ç", callback_data="voice_2"))
    builder.row(types.InlineKeyboardButton(text="üó°Ô∏è –ö—Ä–∏—Ç–∏–∫—É–µ—Ç", callback_data="voice_3"))
    builder.row(types.InlineKeyboardButton(text="ü§° –í—ã—Å–º–µ–∏–≤–∞–µ—Ç", callback_data="voice_4"))

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts), reply_markup=builder.as_markup())
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id


async def ask_cipher(callback: types.CallbackQuery):
    prompts = [
        "–ü–î–ê: –í–≤–µ–¥–∏ –®–ò–§–† –î–ù–Ø ‚Äî –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.",
        "–ü–î–ê: –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Ç—ã –±—ã –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —Å—Ç–µ–Ω–µ –≤ –±—É–Ω–∫–µ—Ä–µ?",
        "–ü–î–ê: –û–¥–Ω–æ —Å–ª–æ–≤–æ. –ö–∞–∫ –ø–∞—Ä–æ–ª—å –≤ —Ç–µ—Ç—Ä–∞–¥–∫–µ –≤—ã–∂–∏–≤—à–µ–≥–æ.",
        "–ü–î–ê: –ß—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–π—á–∞—Å –≤ –æ–¥–Ω–æ–º —Å–ª–æ–≤–µ?",
        "–ü–î–ê: –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è, —Å—Ç–∞–ª–∫–µ—Ä.",
        "–ü–î–ê: –ö–∞–∫–∏–º —Å–ª–æ–≤–æ–º –æ–±–æ–∑–Ω–∞—á–∏—à—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å?",
        "–ü–î–ê: –í–≤–µ–¥–∏ –®–ò–§–† –î–ù–Ø ‚Äî –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–¥–∞—é—â–µ–µ —Å—É—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        "–ü–î–ê: –ü–µ—Ä–µ–¥–∞–π —Å–∏–≥–Ω–∞–ª –ó–æ–Ω–µ. –û–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.",
        "–ü–î–ê: –û–¥–Ω–æ —Å–ª–æ–≤–æ. –ö–∞–∫ —à—Ä–∞–º, –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø–æ—Å–ª–µ –≤—ã–ª–∞–∑–∫–∏.",
        "–ü–î–ê: –í–≤–µ–¥–∏ –∫–ª—é—á –∫ —Å–µ–±–µ. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ, –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ."
        "–ü–î–ê: –í–≤–µ–¥–∏ —à–∏—Ñ—Ä –¥–Ω—è ‚Äî –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
        "–ü–î–ê: –ê–∫—Ç–∏–≤–∏—Ä—É–π —à–∏—Ñ—Ä–æ—Å–ª–æ—Ç. –û–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.",
        "–ü–î–ê: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ—Å–µ—Å—Å–∏–∏. –ö–ª—é—á-–ø–∞—Ä–æ–ª—å: –æ–¥–Ω–æ —Å–ª–æ–≤–æ.",
        "–ü–î–ê: –ó–æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä. –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è."
    ]

    user_id = callback.from_user.id
    old_msg_id = user_state.get(user_id, {}).get("last_message_id")
    if old_msg_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, old_msg_id)
        except:
            pass

    msg = await callback.message.answer(random.choice(prompts))
    user_state.setdefault(user_id, {})["last_message_id"] = msg.message_id
