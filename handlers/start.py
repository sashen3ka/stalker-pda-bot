# handlers/start.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import CallbackQuery
from handlers.questions import ask_energy
import datetime
from utils.state import user_state

DEBUG_MODE = True  # üîß –£—Å—Ç–∞–Ω–æ–≤–∏ –≤ False –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è


async def handle_start_scan(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    user_id = callback.from_user.id
    today = datetime.date.today()

    user_data = user_state.get(user_id, {})
    last_scan = user_data.get("last_scan")

    if not DEBUG_MODE and last_scan == today:
        await callback.message.answer("üõë –ü–î–ê —É–∂–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è.\n–í–µ—Ä–Ω–∏—Å—å –∑–∞–≤—Ç—Ä–∞, —Å—Ç–∞–ª–∫–µ—Ä.")
        await callback.answer()
        return

    user_state[user_id] = {
        "last_scan": today,
        "current": {},
        "history": user_data.get("history", [])
    }

    await ask_energy(callback)
    await callback.answer()




async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="üß† –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_scan")
    await message.answer("üì° –ü–î–ê –≤—ã—Ö–æ–¥–∏—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç—É...\n–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é, —Å—Ç–∞–ª–∫–µ—Ä.", reply_markup=builder.as_markup())
